//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.10.30 at 06:34:20 PM IST 
//


package com.tcl.dias.oms.cisco.beans;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;


/**
 * The eb:Messaging
 *                         element is the top element of ebMS-3 headers, and it
 *                         is
 *                         placed
 *                         within the SOAP Header element (either SOAP 1.1 or SOAP 1.2). The
 *                         eb:Messaging element may contain several instances of
 *                         eb:SignalMessage
 *                         and eb:UserMessage elements. However in the core
 *                         part of the ebMS-3
 *                         specification, only one instance of either
 *                         eb:UserMessage or
 *                         eb:SignalMessage
 *                         must be present. The second part
 *                         of ebMS-3 specification may need to
 *                         include
 *                         multiple instances of
 *                         either eb:SignalMessage, eb:UserMessage or both.
 *                         Therefore, this
 *                         schema is allowing multiple instances of
 *                         eb:SignalMessage
 *                         and
 *                         eb:UserMessage elements for part 2 of the ebMS-3 specification.
 *                         Note
 *                         that the eb:Messaging element cannot be empty (at least one of
 *                         eb:SignalMessage or eb:UserMessage element must present).
 *                     
 * 
 * <p>Java class for Messaging complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Messaging"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SignalMessage" type="{http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/}SignalMessage" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="UserMessage" type="{http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/}UserMessage" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/}headerExtension"/&gt;
 *       &lt;anyAttribute processContents='lax' namespace='##other'/&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Messaging", namespace = "http://docs.oasis-open.org/ebxml-msg/ebms/v3.0/ns/core/200704/", propOrder = {
    "signalMessage",
    "userMessage"
})
public class Messaging {

    @XmlElement(name = "SignalMessage")
    protected List<SignalMessage> signalMessage;
    @XmlElement(name = "UserMessage")
    protected List<UserMessage> userMessage;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the signalMessage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the signalMessage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSignalMessage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SignalMessage }
     * 
     * 
     */
    public List<SignalMessage> getSignalMessage() {
        if (signalMessage == null) {
            signalMessage = new ArrayList<SignalMessage>();
        }
        return this.signalMessage;
    }

    /**
     * Gets the value of the userMessage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userMessage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserMessage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UserMessage }
     * 
     * 
     */
    public List<UserMessage> getUserMessage() {
        if (userMessage == null) {
            userMessage = new ArrayList<UserMessage>();
        }
        return this.userMessage;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
