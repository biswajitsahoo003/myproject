hibernate.datasource.jdbc-url=${DB_URL}
hibernate.datasource.user=${DB_UNAME}
hibernate.datasource.password=${DB_PWD}
hibernate.datasource.driver-class=com.mysql.jdbc.Driver
hibernate.datasource.max-idle-time=6
hibernate.datasource.min-pool-size=3
hibernate.datasource.max-pool-size=15

spring.jpa.show-sql = false
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.quartz.job-store-type = memory
spring.quartz.properties.org.quartz.threadPool.threadCount = 5

application.env=${APP_ENV}

management.endpoints.web.exposure.include=health,prometheus

logging.file=logback.xml

#redis related configuration
spring.redis.host=${REDIS_HOST}
spring.redis.password=${REDIS_PWD}
spring.redis.port=${REDIS_PORT}
spring.redis.jedis.pool.max-active=10
spring.redis.jedis.pool.max-idle=6
spring.redis.jedis.pool.min-idle=6
server.servlet.contextPath=/authentication
server.port=6060
token.refresh.time=300000
token.expiry.time=600000
token.purge.time=1800000

#token.refresh.time=30000000
#token.expiry.time=60000000
#token.purge.time=180000000

http.protocol=https
cas.server.host=${CAS_HOST}
cas.app.url.prefix=
cas.service.url.prefix=..
cas.app.name=sso
app.host=${APP_HOST}

rabbitmq.tokengen.name=token_refresh

#AMPQ related properties
spring.rabbitmq.host=${MQ_HOST}
spring.rabbitmq.port=${MQ_PORT}
spring.rabbitmq.username=${MQ_UNAME}
spring.rabbitmq.password=${MQ_PWD}
spring.rabbitmq.listener.simple.acknowledge-mode=auto
spring.rabbitmq.listener.direct.default-requeue-rejected=false
spring.rabbitmq.listener.simple.default-requeue-rejected=false
 
scheduler.expression.tokenExpire=0 0/1 * * * ?

info.app.name= Optimus-Auth
info.app.description=This application is used to generate the token and handles authentication.
info.build.groupId=@project.groupId@
info.build.artifact=@project.artifactId@
info.build.name=@project.name@
info.build.version=@project.version@
info.env.java.vendor=${java.specification.vendor}
info.env.java.vm-name=${java.vm.name}
info.env.java.runtime-version=${java.runtime.version}
management.health.defaults.enabled=true
management.server.servlet.context-path=/
info.keycloak_user=${KEYCLOAK_UNAME}
info.keycloak_pwd=${KEYCLOAK_PWD}
info.keycloak_clientid=optimus
info.keycloak_granttype=password
info.keycloak_realm-url=admin/realms/
info.keycloak_resetpassword=/reset-password
#keycloak configurations
keycloak.auth-server-url=${AUTH_URL}
keycloak.realm=master

keycloak.resource=optimus
keycloak.public-client=true
keycloak.proxy-url=${KEYCLOAK_PROXY}
keycloak.ssl-required=none
keycloak.disable-trust-manager=true
keycloak.bearer-only=true
rabbitmq.userinfo.name=queue.user.info
rabbitmq.userinfo.get=queue.user.get

keycloak.principal-attribute=preferred_username

auth.reset.path=/authentication/reset.html
notification.mail.queue=notification_mail
reset.expiry.time=172800000


spring.ldap.urls=${LDAP_URL}
spring.ldap.base=${LDAP_BASE}
spring.ldap.username=${LDAP_UNAME}
spring.ldap.password=${LDAP_PWD}

usermanagement.user.path=${USERMANAGEMENT_URL}

notification.mail.from=no-reply@tatacommunications.com
notification.mail.bcc=manojkumar.rajakumaran@tatacommunications.com
notification.mail.template=RPT

info.management.add.user=user_management_add_user
info.management.update.user=user_management_update_user
info.management.delete.user=user_management_delete_user
info.management.get.user=user_management_get_user
info.management.change.password.user=user_management_change_password_user
rabbitmq.roles.creation=role_create
rabbitmq.keycloack.roles=role_get

swagger.info.title=Optimus Authentication
swagger.info.description= Authentication is a microservice , which handles authentication,authorization,user services etc.. 
swagger.info.version=1.0
swagger.info.toc=https://www.tatacommunications.com/policies/terms-of-use/

system.proxy.host=${SYSTEM_PROXY_HOST}
system.proxy.port=${SYSTEM_PROXY_PORT}

rabbitmq.customer.details.queue=rabbitmq_customer_details_queue
rabbitmq.customer.le.by.id=rabbitmq_customer_le_by_id
rabbitmq.customerlename.queue=rabbitmq_customer_le_name_by_id
rabbitmq.customer.le.by.customerids=rabbitmq_customer_le_by_customerids
info.oms.get.customerle.notin.usergroup=rabbitmq_customer_le_not_in_usergroup
rabbitmq.userinfo.le=rabbitmq_userinfo_le

management.endpoint.info.enabled=false

notification.usermgt.createuser.template=CUCT
notification.usermgt.createuser.pilot.template=PUCNT
notification.usermgt.mail=${CUSTOMER_SUPPORT_EMAIL}

mq.user.notification.create=mq_user_notification_create
mq.get.all.notification.user=mq_get_all_notification_user
mq.user.notification.update=mq_user_notification_update

rabbitmq.customer.get.all.usg=rabbitmq_customer_get_all_usg

swift.api.hash.password=${SWIFT_HASH}
swift.api.container=${SWIFT_CONTAINER}
swift.api.authurl=${SWIFT_AUTHURL}
swift.api.username=${SWIFT_USERNAME}
swift.api.password=${SWIFT_PASSWORD}
swift.api.tenantname=${SWIFT_TENANTNAME}
swift.api.enabled=${SWIFT_ENABLED}
temp.upload.url.expiryWindow=${SWIFT_UPLOADEXPIRYWINDOW}
temp.download.url.expiryWindow=${SWIFT_DOWNLOADEXPIRYWINDOW}

optimus.audit.save.queue = optimus_audit_save_queue
oms.get.quote.data.by.id = oms_get_quote_data_by_id
oms.get.quotetole.data.by.id = oms_get_quotetole_data_by_id
oms.get.order.by.id = oms_get_order_by_id
oms.get.orderle.by.id = oms_get_orderle_by_id

rabbitmq.get.partner.legal.entities=rabbitmq_get_partner_legal_entities
rabbitmq.customer.details.by.le.queue=rabbitmq_customer_details_by_le_queue

user.management.filter.api.url =${USER_MANAGEMENT_FILTER_API_URL}
user.management.partner.psam.action=OPT_MASTER_AGENT_PSAM_PARTNER
user.management.ipc.partner.migration.action=OPTIMUS_IPC_PARTNER_MIGRATION_USER
queue.get.mstUserGroups=get.mst.user.groups
forex.api.username=${FOREX_API_UNAME}
forex.api.password=${FOREX_API_PWD}
forex.api.url=${FOREX_API_URL}

rabbitmq.customer.id.by.le.id=rabbitmq_customer_id_by_le_id
rabbitmq.partner.id.by.le.id=rabbitmq_partner_id_by_le_id
customer.portal.support.email=customer.portal@tatacommunications.com
customer.portal.support.email.dev=manojkumar.rajakumaran@tatacommunications.com
notification.customer.help.template=CUHTM
rabbitmq.product.get.all=rabbitmq_product_get_all
rabbitmq.engagementInfo.get=rabbitmq_engagementInfo_get