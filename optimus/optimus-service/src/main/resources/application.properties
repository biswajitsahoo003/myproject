logging.file=logback.xml

#AMPQ related properties
spring.rabbitmq.host=${MQ_HOST}
spring.rabbitmq.port=${MQ_PORT}
spring.rabbitmq.username=${MQ_UNAME}
spring.rabbitmq.password=${MQ_PWD}
spring.rabbitmq.listener.simple.acknowledge-mode=auto
spring.rabbitmq.listener.direct.default-requeue-rejected=false
spring.rabbitmq.listener.simple.default-requeue-rejected=false

#redis related configuration
spring.redis.host=${REDIS_HOST}
spring.redis.password=${REDIS_PWD}
spring.redis.port=${REDIS_PORT}
spring.redis.jedis.pool.max-active=10
spring.redis.jedis.pool.max-idle=6
spring.redis.jedis.pool.min-idle=6

management.endpoints.web.exposure.include=health,prometheus

attatchment.queue=attachment
oms.attachment.queue=oms_attachment
file.download.queue=download_queue

spring.quartz.job-store-type = memory
spring.quartz.properties.org.quartz.threadPool.threadCount = 5

server.servlet.contextPath=/optimus-service/api
server.port=7074
token.refresh.time=300000
token.expiry.time=600000
token.purge.time=1800000

#token.refresh.time=30000000
#token.expiry.time=60000000
#token.purge.time=180000000

rabbitmq.tokengen.name=token_refresh

swagger.info.title=Optimus Service
swagger.info.description= Optimus Service have all the utilities
swagger.info.version=1.0
swagger.info.toc=https://www.tatacommunications.com/policies/terms-of-use/


rabbitmq.opportunity.create=sfdc_create_opportunity_request
rabbitmq.opportunity.get=sfdc_get_opportunity_request
rabbitmq.opportunity.site=sfdc_site_create_request
rabbitmq.opportunity.productservices=sfdc_product_service_request
rabbitmq.opportunity.update=sfdc_update_opportunity_request
rabbitmq.opportunity.productservices.update=sfdc_update_product_service_request


rabbitmq.opportunity.response.create=sfdc_create_opportunity_response
rabbitmq.opportunity.response.site=sfdc_site_create_response
rabbitmq.opportunity.response.productservices=sfdc_product_service_response
rabbitmq.opportunity.response.update=sfdc_update_opportunity_response
rabbitmq.opportunity.response.updateproductservices=sfdc_update_product_service_request
rabbitmq.opportunity.response.deleteproductservices=sfdc_delete_product_service_request

rabbitmq.sfdc.create.feasibility=sfdc_create_feasibility_request
rabbitmq.sfdc.feasibility.response=sfdc_create_feasibility_response



sfdc.username=${SFDC_UNAME}
sfdc.password=${SFDC_PWD}
sfdc.grant.type=${SFDC_GRANT_TYPE}
sfdc.auth=${SFDC_AUTH}
sfdc.client=${SFDC_CLIENT}
sfdc.secret=${SFDC_SECRET}
sfdc.auth.token=${SFDC_AUTH_URL}
sfdc.end.point=${SFDC_GEN_HOST}
sfdc.create.opportunity=${SFDC_OPT_CREATE_PATH}
sfdc.product.request=${SFDC_PRD_CREATE_REQ_URL}
sfdc.delete.request=${SFDC_PRD_DELETE_URL}
sfdc.update.stage=${SFDC_STAGE_UPDATE_URL}
sfdc.site.update=${SFDC_SITE_UPDATE_URL}
sfdc.create.feasibility.url=${SFDC_CREATE_FEAS_URL}
sfc.bcr.url=${SFDC_CREATE_BCR_URL}

notification.mail.from=no-reply@tatacommunications.com
notification.mail.template=ANT
notification.mail.queue=notification_mail
notification.mail.bcc=


## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=50MB
# Max Request Size
spring.servlet.multipart.max-request-size=75MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=/opt/optimus-files/

system.proxy.host=${SYSTEM_PROXY_HOST}
system.proxy.port=${SYSTEM_PROXY_PORT}

application.build.version=${BUILD_VERSION}

rabbitmq.userinfo.name=queue.user.info
rabbitmq.userinfo.get=queue.user.get
#keycloak configurations
keycloak.auth-server-url=${AUTH_URL}
keycloak.realm=master
keycloak.principal-attribute=preferred_username
keycloak.resource=optimus
keycloak.public-client=true
keycloak.proxy-url=${KEYCLOAK_PROXY}
keycloak.ssl-required=none
keycloak.disable-trust-manager=true
keycloak.bearer-only=true

management.endpoint.info.enabled=false

notification.dev.sfdc.error.template=SENT
notification.devteam.mail=${DEV_TEAM}
rabbitmq.tiger.error.queue=rabbitmq_tiger_error_queue


swift.api.hash.password=${SWIFT_HASH}
swift.api.container=${SWIFT_CONTAINER}
swift.api.authurl=${SWIFT_AUTHURL}
swift.api.username=${SWIFT_USERNAME}
swift.api.password=${SWIFT_PASSWORD}
swift.api.tenantname=${SWIFT_TENANTNAME}
swift.api.enabled=${SWIFT_ENABLED}
temp.upload.url.expiryWindow=${SWIFT_UPLOADEXPIRYWINDOW}
temp.download.url.expiryWindow=${SWIFT_DOWNLOADEXPIRYWINDOW}




sfdc.create.bcr=sfdc_create_bcr_request

sfdc.process.bcr=sfdc_process_bcr_response
rabbitmq.partner.entity.create=rabbitmq_partner_entity_create
rabbitmq.create.partner.entity.response.update=create_partner_entity_response_update
sfdc.create.ptr.entity.url=GSC_REST_V9_2/LegalEntityService
sfdc.get.sales.funnel.url=${SFDC_GET_SALES_FUNNEL_URL}
rabbitmq.get.sales.funnel=get_sales_funnel


optimus.audit.save.queue = optimus_audit_save_queue
oms.get.quote.data.by.id = oms_get_quote_data_by_id
oms.get.quotetole.data.by.id = oms_get_quotetole_data_by_id
oms.get.order.by.id = oms_get_order_by_id
oms.get.orderle.by.id = oms_get_orderle_by_id


mdm.process.details=mdm_process_details
mdm.process.response=mdm_process_response
mdm.end.point=${MDM_URL}
cmd.update.billing=cmd_update_billing


sfdc.process.cofid=sfdc_process_cofid
sfdc.copf.url=${SFDC_COPF_URL}

sfdc.process.copf.response=sfdc_process_copf_response
mdm.auth.key=dGNsLUVNaVg4RXlXWDUyR2JlVnQwbGMzZTdOdzo1YWUwOWQ0ZTkwMjcwNWM1NWFhODNjOGY0YzQzNDJjMzczNjM5YjQ1

sfdc.get.credit.check.query.url=bsseAPIQueryData
sfdc.process.creditcheck.query=sfdc_process_creditcheck
sfdc.credit.check.response=sfdc_credit_check_response
sfdc.process.creditcheck.retrigger.queue = sfdc_process_creditcheck_retrigger
rabbitmq.partner.opportunity.create=rabbitmq_partner_opportunity_create
sfdc.create.opportunity.dealregistration=orderCreator

rabbitmq.get.deal.registration=rabbitmq_get_deal_registration
rabbitmq.get.campaign.detail=rabbitmq_get_campaign_detail

forex.api.username=${FOREX_API_UNAME}
forex.api.password=${FOREX_API_PWD}
forex.api.url=${FOREX_API_URL}

sfdc.process.ownerregion.query=sfdc_process_ownerregion_query
rabbitmq.get.service.request.queue=rabbitmq_get_service_request_queue

sfdc.get.opportunity={SFDC_OPT_CREATE_PATH}
notification.dev.tiger.error.template=NDTET
rabbitmq.mapper.service=rabbitmq_mapper_service

rabbitmq.sfdc.create.waiver =sfdc_create_waiver_request
rabbitmq.sfdc.update.waiver =sfdc_update_waiver_request
rabbitmq.sfdc.waiver.response.create = sfdc_waiver_response_create
rabbitmq.sfdc.waiver.response.update = sfdc_waiver_response_update


sfdc.waiver.create=ETCWaiverService  


rabbitmq.create.account.entity.request=rabbitmq_create_account_entity_request
sfdc.account.create.request.url=P1_CR_V2/AccountLegalEntityReqServiceRequest
sfdc.account.update.request.url=GSC_REST_V9_2/AccountService
rabbitmq.update.account.request=rabbitmq_update_account_request

sfdc.create.partner.entity.contact.url=GSC_REST_V9_2/LegalEntityService
rabbitmq.partner.entity.contact.create=rabbitmq_partner_entity_contact_create
rabbitmq.create.partner.entity.contact.response.update=create_partner_entity_contact_response_update
